#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENT 200
#define SIZE 18

typedef struct {
	int key;
}element;

typedef struct {
	element heap[MAX_ELEMENT];
	int heap_size; 
}HeapType;


//힙의 현 상태 출력
void heap_status(HeapType* h)
{
	printf("\theap:");
	for (int i = 1; i < h->heap_size; i++)
	{
		printf("%d ", h->heap[i].key);
	}
	printf("\n");
}

//생성함수 
HeapType* create()
{
	return (HeapType*)malloc(sizeof(HeapType));
}

//초기화 함수 
void init(HeapType* h)
{
	h->heap_size = 0;
}

//현재 요소의 개수가 heap_size인 히프 h에 item을 삽입
//삽입 함수 
void insert_max_heap(HeapType* h, element item)
{
	int i;
	i = ++(h->heap_size);

	//트리를 거슬러 올라가면서 부모 노드와 비교하는 과정
	while ((i != 1) && (item.key > h->heap[i / 2].key)) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h -> heap[i] = item;
	heap_status(h);
}

//삭제 함수 
element delete_max_heap(HeapType* h)
{
	int parent, child;
	element item, temp;

	//루트 노드 값을 반환하기 위하여 item 변수로 옮김
	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		//현재 노드의 자식 노드 중 더 큰 자식 노드를 찾음 
		if ((child < h->heap_size) &&
			(h->heap[child].key) > h->heap[child + 1].key)
			child++;
		if (temp.key >= h->heap[child].key) break;
		//한 단계 아래로 이동
		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;
	heap_status(h);
	return item;
}



//우선순위 큐인 히프를 이용한 정렬
void heap_sort(element a[], int n)
{
	int i;
	HeapType* h;

	h = create();
	init(h);
	for (i = 0; i < n; i++) {
		insert_max_heap(h, a[i]);
	}
	for (i = (n - 1); i >= 0; i--) {
		a[i] = delete_max_heap(h);
	}
	free(h);
}



int main(void)
{
	element list[SIZE] = { 34,12,76,59,32,55,88,26,16,79,34,85,29,78,41,56,86 };
	HeapType* heap;
	heap= create();
	init(heap);

	//list 요소 삽입
	for (int i = 0; i < SIZE; i++)
	{
		insert_max_heap(heap, list[i]);
	}

	heap_sort(list, SIZE);
	printf("정렬 결과\n");
	for (int i = 0; i < SIZE; i++) {
		printf("%d ", list[i].key);
	}

}
